// 비동기성(async)과 동기성에 대해 알아보자
// 컴퓨터는 두가지 일을 동시에 할 수 있다
// 이 코딩 학습만 해도 VSC를 실행한 채로 강의를 듣고 있지 않는가?
// internet도 연결돼있고 시계도 작동하고 있다
// JS는 이렇게 동시에 많은일을 할 수 있다
// 한쪽에서 어떤 일을 하고 있어도 내 프로그램은 그대로 실행중이다
// 웹사이트에서 데이터를 가져와보자 fetch를 써서
const hello = fetch("https://google.com");
console.log("something");
console.log(hello);
// 이렇게 하면 에러가 hello출력한 이후 나오게 된다
// 근데 이 에러는 자세히 보면 fetch에 대한 에러이다
// 따라서 8번 줄에서 에러가 발생한 것
// 그렇다면 이론적으로 구글닷컴이 fetch되고 그 후 에러가 발생하고
// 그 후 console.log 가 실행되는게 맞아보인다 사실 에러 발생 이후이므로
// console.log도 실행 안돼야 한다
// 근데 출력창에는 에러가 마지막에 뜬 것을 알 수 있다
// 이것이 JS의 비동기성(async)이다
// JS는 단순히 fetch를 했다고 프로그램의 실행을 멈추지 않는다
// JS는 우선 코드대로 google.com fetch를 실행하고 계속해서 something을
// console.log에 띄운다 그리고 google.com의 fetch가 끝나면 에러가 발생한다
// (fetch는 가져온다 라는 뜻이다)

// 즉 JS는 코드를 위에서 아래로 읽어나간다. 그리고 fetch를 실행하자 마자 한쪽에서
// 어떤 action을 시작한다 그리고 console.log 실행하고 하는 와중에 action했던 것에서
// 에러가 발생한다 그리고 다시 이쪽으로 돌아와서 에러가 발생했다고 말하는 거다
// 이게 비동기적 프로그래밍 async이다 즉, action과 동시에 결과값이(여기선 에러) 바로 나오는
// 것이 아니고 약간의 텀이 발생한다는 뜻이다.
// 즉, 요청한 그 자리에서 바로 결과값이 튀어나오지 않고 한쪽으로 치워서 데이터 처리하고
// 계속 코드 읽어나가다가 데이터 처리 완료되면 가져와서 출력하는 것이다
// https://private.tistory.com/24 이 사이트에 쉽게 설명돼있다
// 이 비동기적 프로그래밍이 앞으로 배울 promises의 기초가 된다
